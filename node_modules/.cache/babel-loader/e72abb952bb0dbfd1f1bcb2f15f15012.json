{"ast":null,"code":"var _jsxFileName = \"/Users/shannonruder/Desktop/bootcamp/hw-submissions/react-memory-game/memory-app/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport PictureCard from \"./components/PictureCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards,\n      clickedArray: [],\n      topScore: 0,\n      score: 0,\n      message: \"\",\n      shakeit: \"false\"\n    };\n\n    this.clickPicture = id => {\n      // Arrange the pictures in a random manner\n      const shuffledArray = this.shuffleArray(cards);\n      this.setState({\n        cards: shuffledArray\n      }); // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\n\n      if (this.state.clickedArray.includes(id)) {\n        this.setState({\n          score: 0,\n          clickedArray: [],\n          message: \"Incorrect!! Game Over ‚òπÔ∏è Click an image to start again!\",\n          shakeit: \"true\"\n        });\n      } else {\n        this.setState({\n          clickedArray: this.state.clickedArray.concat([id]),\n          score: this.state.score + 1,\n          message: \"Correct!! üôÇ\",\n          shakeit: \"false\"\n        });\n      } // set topscore = score if score>topscore.\n\n\n      if (this.state.score > this.state.topScore) {\n        this.setState({\n          topScore: this.state.score\n        });\n      } // shake the wrapper if shakeit is set to true\n\n    };\n\n    this.shuffleArray = picturesArray => {\n      for (let i = picturesArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        var _ref = [picturesArray[j], picturesArray[i]];\n        picturesArray[i] = _ref[0];\n        picturesArray[j] = _ref[1];\n      }\n\n      return picturesArray;\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: \"./images/tattoostudio_bk.png\",\n      className: \"App-navbarbackground\",\n      alt: \"tattoo_studio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"h6\", {\n      className: \"App-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Welcome to React Clicky Game!!\")), React.createElement(\"h3\", {\n      className: \"App-intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Click on an image to earn points, but don't click on any, more than once!\"), React.createElement(\"p\", {\n      className: \"score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Score: \", this.state.score, \" | TopScore: \", this.state.topScore)), React.createElement(\"p\", {\n      className: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.state.message))), React.createElement(Wrapper, {\n      shakeWrapper: this.state.shakeit,\n      pictures: this.state.cards.map(picture => React.createElement(PictureCard, {\n        clickPicture: this.clickPicture,\n        id: picture.id,\n        key: picture.id // to get rid of unique key prop warning\n        // name={picture.name}\n        ,\n        image: picture.image,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"footer\", {\n      className: \"footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"\\xA9Shama - Memory Game - React app.\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/shannonruder/Desktop/bootcamp/hw-submissions/react-memory-game/memory-app/src/App.js"],"names":["React","Component","PictureCard","Wrapper","cards","App","state","clickedArray","topScore","score","message","shakeit","clickPicture","id","shuffledArray","shuffleArray","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","render","logo","map","picture","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PictureCard from \"./components/PictureCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n    // Setting this.state.cards to the cards json array\n    state = {\n      cards,\n      clickedArray: [],\n      topScore: 0,\n      score: 0,\n      message: \"\",\n      shakeit: \"false\"\n    };\n  \n    clickPicture = id => {\n      // Arrange the pictures in a random manner\n      const shuffledArray = this.shuffleArray(cards);\n      this.setState({cards: shuffledArray});\n      // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\n      if (this.state.clickedArray.includes(id)) {\n        this.setState({ score: 0, clickedArray: [], message: \"Incorrect!! Game Over ‚òπÔ∏è Click an image to start again!\", shakeit: \"true\"});\n      }\n      else {\n        this.setState({\n          clickedArray: this.state.clickedArray.concat([id]),\n          score: this.state.score + 1,\n          message: \"Correct!! üôÇ\",\n          shakeit: \"false\"\n        });\n      }\n      // set topscore = score if score>topscore.\n      if (this.state.score > this.state.topScore) {\n        this.setState({ topScore: this.state.score });\n      }\n      // shake the wrapper if shakeit is set to true\n    }\n    shuffleArray = (picturesArray) => {\n        for (let i = picturesArray.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\n        }\n        return picturesArray;\n    }\n\n    render() {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <img src=\"./images/tattoostudio_bk.png\" className=\"App-navbarbackground\" alt=\"tattoo_studio\" />\n            <h6 className=\"App-title\">Welcome to React Clicky Game!!</h6>\n          </header>\n          <h3 className=\"App-intro\">\n            <strong>Click on an image to earn points, but don't click on any, more than once!</strong> \n            <p className = \"score\"><strong>Score: {this.state.score} | TopScore: {this.state.topScore}</strong></p>\n            <p className=\"message\"><strong>{this.state.message}</strong></p>\n          </h3>\n          <Wrapper\n          shakeWrapper = {this.state.shakeit}\n          pictures=\n            {this.state.cards.map(picture => (\n              <PictureCard\n                clickPicture={this.clickPicture}\n                id={picture.id}\n                key={picture.id} // to get rid of unique key prop warning\n                // name={picture.name}\n                image={picture.image}\n              />\n            ))}\n          />\n          <footer className=\"footer\">\n        <div className=\"container\">\n          <span className=\"text-muted\">&copy;Shama - Memory Game - React app.</span>\n        </div>\n      </footer> \n        </div>\n      );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}